name: main
on:
  push:
    branches:
    - master
    tags:
    - "*"
  pull_request:
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: pre-commit/action@v2.0.0
  test:
    name: test
    runs-on: ubuntu-latest
    container: golang:1.16.1-alpine3.12
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        fetch-depth: 0
    - name: Test
      run: |
        scripts/alpine-setup.sh
        make test
  build-darwin:
    name: build darwin
    runs-on: ubuntu-latest
    container: golang:1.16.1-alpine3.12
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Build
        run: |
          scripts/alpine-setup.sh
          GOOS=darwin GOARCH=amd64 make all
        shell: sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: release-artifacts-darwin
          path: release-artifacts
  build:
    name: build linux
    runs-on: ubuntu-latest
    container: golang:1.16.1-alpine3.12
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Build
        run: |
          scripts/alpine-setup.sh
          GOOS=linux GOARCH=amd64 make all
          make changelog
        shell: sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: release-artifacts
          path: release-artifacts
  build-windows:
    name: build windows
    runs-on: ubuntu-latest
    container: golang:1.16.1-alpine3.12
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Build
        run: |
          scripts/alpine-setup.sh
          GOOS=windows GOARCH=amd64 make all
        shell: sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Archive release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: release-artifacts-windows
          path: release-artifacts
  release:
    name: Release
    needs:
      [test, pre-commit, build, build-darwin, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: release-artifacts
          path: release-artifacts
      - uses: actions/download-artifact@v1
        with:
          name: release-artifacts-darwin
          path: release-artifacts
      - uses: actions/download-artifact@v1
        with:
          name: release-artifacts-windows
          path: release-artifacts
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=git_tag::${GITHUB_REF/refs\/tags\//}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.git_tag }}
          release_name: ${{ steps.get_tag.outputs.git_tag }}
          body_path: ./release-artifacts/changelog.md
          draft: ${{ startsWith(steps.get_tag.outputs.git_tag, 'nightly') != true }}
          prerelease: ${{ startsWith(steps.get_tag.outputs.git_tag, 'nightly') }}
      - name: Upload Release Asset - Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts-darwin/kubent-${{ steps.get_tag.outputs.git_tag }}-darwin-amd64.tar.gz
          asset_name: kubent-${{ steps.get_tag.outputs.git_tag }}-darwin-amd64.tar.gz
          asset_content_type: application/tar+gzip
      - name: Upload Release Asset - Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/kubent-${{ steps.get_tag.outputs.git_tag }}-linux-amd64.tar.gz
          asset_name: kubent-${{ steps.get_tag.outputs.git_tag }}-linux-amd64.tar.gz
          asset_content_type: application/tar+gzip
      - name: Upload Release Asset - Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts-windows/kubent-${{ steps.get_tag.outputs.git_tag }}-windows-amd64.tar.gz
          asset_name: kubent-${{ steps.get_tag.outputs.git_tag }}-windows-amd64.tar.gz
          asset_content_type: application/tar+gzip
